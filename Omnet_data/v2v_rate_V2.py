import pymysql
import numpy as np
import time
import udp_request
import struct
import random
''' 
Assume Vehicle 0 as Task Vehicle 
-------------------------------------------------------------------------------------
| EVENT | send_time | Vehicle 1 | Vehicle 2| Vehicle 3| BS0_DENSITY |BS1_DENSITY|
|   1   |    64     |   1.23    |  0.81    |   0.43   |     4       |    0      |
...
--------------------------------------------------------------------------------------
'''
ts_vehicle0_table = [[1,    64,	1.23,	0.81,	0.43, 4, 0],
                     [2,	66,	1.27,	1.14,	0.94, 4, 0],
                     [3,	68,	1.96,	1.72,	1.164, 4, 0],
                     [4,	70,	2.06,	1.88,	1.458, 4, 0],
                     [5,	72,	1.44,	1.65,	1.253, 4, 0],
                     [6,	74,	1.08,	0.68,	0.311, 4, 0],
                     [7,	76,	1.72,	1.56,	1.268, 4, 0],
                     [8,	78,	1.98,	1.72,	1.204, 4, 0],
                     [9,	80,	2.02,	1.86,	1.336, 4, 0],
                     [10,	82,	2.19,	1.99,	1.34, 4, 0],
                     [11,	84,	2.24,	1.54,	1.033, 4, 0],
                     [12,	86,	2.65,	2.49,	2.224, 4, 0],
                     [13,	88,	2.98,	2.56,	2.054, 4, 0],
                     [14,	90,	3.9,	3.41,	3.198, 4, 0],
                     [15,	92,	4.02,	3.24,	2.909, 4, 0],
                     [16,	94,	4.31,	2.88,	2.421, 4, 0],
                     [17,	96,	4.29,	3.81,	3.271, 4, 0],
                     [18,	98,	4.37,	4.02,	3.765, 4, 0],
                     [19,	100,	4.06,	3.74,	3.198, 4, 0],
                     [20,	102,	4.72,	4.56,	4.026, 4, 0],
                     [21,	104,	4.61,	4.02,	3.701, 4, 0],
                     [22,	106,	4.29,	3.49,	3.014, 4, 0],
                     [23,	108,	4.38,	4.17,	3.663, 4, 0],
                     [24,	110,	4.55,	4.36,	3.946, 4, 0],
                     [25,	112,	4.79,	4.56,	4.32, 4, 0],
                     [26,	114,	4.69,	4.06,	3.788, 4, 0],
                     [27,	116,	4.73,	4.58,	4.375, 4, 0],
                     [28,	118,	4.56,	4.33,	4.008, 4, 0],
                     [29,	120,	4.85,	4.3,	3.692, 4, 0],
                     [30,	122,	4.77,	4.52,	3.99, 4, 0],
                     [31,	124,	4.7,	4.12,	3.662, 4, 0],
                     [32,	126,	4.78,	4.47,	4.032, 4, 0],
                     [33,	128,	4.63,	4.12,	3.531, 4, 0],
                     [34,	130,	4.44,	4.26,	4.039, 4, 0],
                     [35,	132,	4.58,	4.11,	3.811, 4, 0],
                     [36,	134,	4.52,	3.98,	3.536, 4, 0],
                     [37,	136,	4.52,	3.74,	3.178, 3, 1],
                     [38,	138,	4.44,	3.89,	3.635, 3, 1],
                     [39,	140,	4.39,	4.12,	3.486, 3, 1],
                     [40,	142,	4.25,	3.77,	3.223, 3, 1],
                     [41,	144,	4.12,	3.62,	3.065, 3, 1],
                     [42,	146,	4.05,	3.83,	3.346, 3, 1],
                     [43,	148,	3.99,	3.63,	3.326, 3, 1],
                     [44,	150,	4.02,	3.78,	3.35, 3, 1],
                     [45,	152,	3.87,	3.68,	3.183, 3, 1],
                     [46,	154,	3.72,	3.21,	3.007, 3, 1],
                     [47,	156,	3.91,	3.87,	3.386, 2, 2],
                     [48,	158,	3.8,	3.56,	3.077, 2, 2],
                     [49,	160,	3.22,	3.02,	2.491, 2, 2],
                     [50,	162,	3.45,	3.25,	2.859, 2, 2],
                     [51,	164,	3.66,	2.18,	1.571, 2, 2],
                     [52,	166,	3.55,	3.12,	2.52, 2, 2],
                     [53,	168,	3.04,	2.64,	2.089, 2, 2],
                     [54,	170,	3.27,	3.02,	2.716, 2, 2],
                     [55,	172,	3.11,	2.41,	2.14, 2, 2],
                     [56,	174,	2.88,	2.28,	2.034, 2, 2],
                     [57,	176,	3.02,	2.87,	2.418, 1, 3],
                     [58,	178,	2.91,	2.74,	2.519, 1, 3],
                     [59,	180,	2.41,	2.2,	1.806, 1, 3],
                     [60,	182,	2.52,	2.31,	1.693, 1, 3],
                     [61,	184,	2.62,	1.51,	0.952, 1, 3],
                     [62,	186,	2.17,	1.73,	1.303, 1, 3],
                     [63,	188,	2.24,	1.98,	1.471, 1, 3],
                     [64,	190,	2.31,	1.72,	1.263, 1, 3],
                     [65,	192,	1.87,	1.41,	0.913, 1, 3],
                     [66,	194,	1.64,	1.69,	1.237, 1, 3],
                     [67,	196,	1.46,	1.21,	0.708, 1, 3],
                     [68,	198,	1.52,	1.32,	0.912, 1, 3],
                     [69,	200,	1.89,	1.52,	1.08, 1, 3],
                     [70,	202,	2.01,	1.89,	1.583, 1, 3]
                     ]
ts_vehicle1_table = [[1,	64,	1.23,	0.969,	0.624, 4, 0],
                     [2,	66,	1.27,	1.361,	1.02, 4, 0],
                     [3,	68,	1.96,	1.733,	1.254, 4, 0],
                     [4,	70,	2.06,	2.086,	1.508, 4, 0],
                     [5,	72,	1.44,	1.26,	0.677, 4, 0],
                     [6,	74,	1.08,	0.882,	0.442, 4, 0],
                     [7,	76,	1.72,	1.438,	1.035, 4, 0],
                     [8,	78,	1.98,	1.807,	1.327, 4, 0],
                     [9,	80,	2.02,	2.091,	1.694, 4, 0],
                     [10,	82,	2.19,	1.895,	1.659, 4, 0],
                     [11,	84,	2.24,	2.13,	1.634, 4, 0],
                     [12,	86,	2.65,	2.745,	2.32, 4, 0],
                     [13,	88,	2.98,	2.797,	2.527, 4, 0],
                     [14,	90,	3.9,	3.643,	3.069, 4, 0],
                     [15,	92,	4.02,	4.03,	3.793, 4, 0],
                     [16,	94,	4.31,	3.981,	3.621, 4, 0],
                     [17,	96,	4.29,	4.35,	3.747, 4, 0],
                     [18,	98,	4.37,	4.462,	4.191, 4, 0],
                     [19,	100,	4.06,	4.059,	3.791, 4, 0],
                     [20,	102,	4.72,	4.595,	3.971, 4, 0],
                     [21,	104,	4.61,	4.573,	4.341, 4, 0],
                     [22,	106,	4.29,	4.305,	4.085, 4, 0],
                     [23,	108,	4.38,	4.207,	3.61, 4, 0],
                     [24,	110,	4.55,	4.609,	4.264, 4, 0],
                     [25,	112,	4.79,	4.712,	4.379, 4, 0],
                     [26,	114,	4.69,	4.78,	4.187, 4, 0],
                     [27,	116,	4.73,	4.512,	3.98, 4, 0],
                     [28,	118,	4.56,	4.444,	4.068, 4, 0],
                     [29,	120,	4.85,	4.694,	4.414, 4, 0],
                     [30,	122,	4.77,	4.846,	4.399, 4, 0],
                     [31,	124,	4.7,	4.445,	3.901, 4, 0],
                     [32,	126,	4.78,	4.546,	4.293, 4, 0],
                     [33,	128,	4.63,	4.5,	4.168, 4, 0],
                     [34,	130,	4.44,	4.211,	3.8, 4, 0],
                     [35,	132,	4.58,	4.419,	4.14, 4, 0],
                     [36,	134,	4.52,	4.438,	3.901, 4, 0],
                     [37,	136,	4.52,	4.243,	3.827, 3, 1],
                     [38,	138,	4.44,	4.158,	3.552, 3, 1],
                     [39,	140,	4.39,	4.331,	3.731, 3, 1],
                     [40,	142,	4.25,	4.245,	3.984, 3, 1],
                     [41,	144,	4.12,	4.102,	3.525, 3, 1],
                     [42,	146,	4.05,	4.126,	3.713, 3, 1],
                     [43,	148,	3.99,	4.028,	3.608, 3, 1],
                     [44,	150,	4.02,	3.999,	3.409, 3, 1],
                     [45,	152,	3.87,	3.7,	3.125, 3, 1],
                     [46,	154,	3.72,	3.429,	3.211, 3, 1],
                     [47,	156,	3.91,	3.597,	3.201, 2, 2],
                     [48,	158,	3.8,	3.748,	3.421, 2, 2],
                     [49,	160,	3.22,	3.127,	2.872, 2, 2],
                     [50,	162,	3.45,	3.12,	2.525, 2, 2],
                     [51,	164,	3.66,	3.528,	3.058, 2, 2],
                     [52,	166,	3.55,	3.65,	3.326, 2, 2],
                     [53,	168,	3.04,	3.031,	2.815, 2, 2],
                     [54,	170,	3.27,	3.026,	2.557, 2, 2],
                     [55,	172,	3.11,	2.813,	2.346, 2, 2],
                     [56,	174,	2.88,	2.899,	2.696, 2, 2],
                     [57,	176,	3.02,	2.893,	2.264, 1, 3],
                     [58,	178,	2.91,	2.655,	2.013, 1, 3],
                     [59,	180,	2.41,	2.203,	1.826, 1, 3],
                     [60,	182,	2.52,	2.293,	1.734, 1, 3],
                     [61,	184,	2.62,	2.519,	2.06, 1, 3],
                     [62,	186,	2.17,	1.989,	1.616, 1, 3],
                     [63,	188,	2.24,	2.125,	1.543, 1, 3],
                     [64,	190,	2.31,	2.386,	1.887, 1, 3],
                     [65,	192,	1.87,	1.866,	1.342, 1, 3],
                     [66,	194,	1.64,	1.693,	1.134, 1, 3],
                     [67,	196,	1.46,	1.288,	0.646, 1, 3],
                     [68,	198,	1.52,	1.331,	0.688, 1, 3],
                     [69,	200,	1.89,	1.836,	1.632, 1, 3],
                     [70,	202,	2.01,	1.805,	1.554, 1, 3]
                     ]
ts_vehicle2_table = [[1,	64,	0.81,	0.912,	1.084, 4, 0],
                     [2,	66,	1.14,	1.052,	0.808, 4, 0],
                     [3,	68,	1.72,	1.777,	1.8, 4, 0],
                     [4,	70,	1.88,	2.044,	2.201, 4, 0],
                     [5,	72,	1.65,	1.272,	1.1, 4, 0],
                     [6,	74,	0.68,	0.887,	0.885, 4, 0],
                     [7,	76,	1.56,	1.453,	1.267, 4, 0],
                     [8,	78,	1.72,	1.831,	2.009, 4, 0],
                     [9,	80,	1.86,	1.686,	1.576, 4, 0],
                     [10,	82,	1.99,	1.941,	2.105, 4, 0],
                     [11,	84,	1.54,	2.087,	2.138, 4, 0],
                     [12,	86,	2.49,	2.594,	2.505, 4, 0],
                     [13,	88,	2.56,	2.826,	2.69, 4, 0],
                     [14,	90,	3.41,	3.745,	3.544, 4, 0],
                     [15,	92,	3.24,	3.871,	3.892, 4, 0],
                     [16,	94,	2.88,	4.402,	4.505, 4, 0],
                     [17,	96,	3.81,	4.275,	4.124, 4, 0],
                     [18,	98,	4.02,	4.39,	4.573, 4, 0],
                     [19,	100,	3.74,	3.832,	4.029, 4, 0],
                     [20,	102,	4.56,	4.439,	4.564, 4, 0],
                     [21,	104,	4.02,	4.553,	4.475, 4, 0],
                     [22,	106,	3.49,	3.989,	3.783, 4, 0],
                     [23,	108,	4.17,	4.244,	4.393, 4, 0],
                     [24,	110,	4.36,	4.422,	4.245, 4, 0],
                     [25,	112,	4.56,	4.786,	4.566, 4, 0],
                     [26,	114,	4.06,	4.673,	4.663, 4, 0],
                     [27,	116,	4.58,	4.58,	4.432, 4, 0],
                     [28,	118,	4.33,	4.549,	4.697, 4, 0],
                     [29,	120,	4.3,	4.775,	4.707, 4, 0],
                     [30,	122,	4.52,	4.754,	4.677, 4, 0],
                     [31,	124,	4.12,	4.551,	4.507, 4, 0],
                     [32,	126,	4.47,	4.74,	4.745, 4, 0],
                     [33,	128,	4.12,	4.484,	4.388, 4, 0],
                     [34,	130,	4.26,	4.127,	3.878, 4, 0],
                     [35,	132,	4.11,	4.537,	4.296, 4, 0],
                     [36,	134,	3.98,	4.481,	4.396, 4, 0],
                     [37,	136,	3.74,	4.535,	4.5, 3, 1],
                     [38,	138,	3.89,	4.438,	4.453, 3, 1],
                     [39,	140,	4.12,	4.079,	3.836, 3, 1],
                     [40,	142,	3.77,	3.99,	3.933, 3, 1],
                     [41,	144,	3.62,	4.013,	3.917, 3, 1],
                     [42,	146,	3.83,	4.04,	4.167, 3, 1],
                     [43,	148,	3.63,	3.779,	3.741, 3, 1],
                     [44,	150,	3.78,	4.026,	3.981, 3, 1],
                     [45,	152,	3.68,	3.6,	3.66, 3, 1],
                     [46,	154,	3.21,	3.787,	3.861, 3, 1],
                     [47,	156,	3.87,	3.599,	3.618, 2, 2],
                     [48,	158,	3.56,	3.865,	3.618, 2, 2],
                     [49,	160,	3.02,	3.287,	3.084, 2, 2],
                     [50,	162,	3.25,	3.225,	3.209, 2, 2],
                     [51,	164,	2.18,	3.572,	3.739, 2, 2],
                     [52,	166,	3.12,	3.24,	3.064, 2, 2],
                     [53,	168,	2.64,	3.012,	2.823, 2, 2],
                     [54,	170,	3.02,	2.957,	3.018, 2, 2],
                     [55,	172,	2.41,	3.183,	3.028, 2, 2],
                     [56,	174,	2.28,	2.733,	2.867, 2, 2],
                     [57,	176,	2.87,	3.047,	2.846, 1, 3],
                     [58,	178,	2.74,	2.728,	2.5, 1, 3],
                     [59,	180,	2.2,	2.394,	2.349, 1, 3],
                     [60,	182,	2.31,	2.323,	2.3, 1, 3],
                     [61,	184,	1.51,	2.401,	2.581, 1, 3],
                     [62,	186,	1.73,	2.235,	2.262, 1, 3],
                     [63,	188,	1.98,	2.148,	2.144, 1, 3],
                     [64,	190,	1.72,	2.093,	2.219, 1, 3],
                     [65,	192,	1.41,	1.739,	1.568, 1, 3],
                     [66,	194,	1.69,	1.409,	1.23, 1, 3],
                     [67,	196,	1.21,	1.55,	1.554, 1, 3],
                     [68,	198,	1.32,	1.486,	1.417, 1, 3],
                     [69,	200,	1.52,	1.565,	1.422, 1, 3],
                     [70,	202,	1.89,	1.801,	1.928, 1, 3]
                     ]
ts_vehicle3_table = [[1,	64,	0.43,	0.666,	1.096, 4, 0],
                     [2,	66,	0.94,	0.793,	1.252, 4, 0],
                     [3,	68,	1.34,	1.368,	1.735, 4, 0],
                     [4,	70,	1.675,	1.317,	2.178, 4, 0],
                     [5,	72,	1.245,	0.909,	1.064, 4, 0],
                     [6,	74,	0.228,	0.579,	0.761, 4, 0],
                     [7,	76,	1.264,	1.117,	1.24, 4, 0],
                     [8,	78,	1.508,	1.382,	1.582, 4, 0],
                     [9,	80,	1.538,	1.081,	1.583, 4, 0],
                     [10,	82,	1.663,	1.218,	1.73, 4, 0],
                     [11,	84,	1.025,	1.682,	1.953, 4, 0],
                     [12,	86,	2.032,	2.257,	2.428, 4, 0],
                     [13,	88,	2.125,	2.445,	2.816, 4, 0],
                     [14,	90,	2.964,	3.336,	3.689, 4, 0],
                     [15,	92,	2.883,	3.617,	3.848, 4, 0],
                     [16,	94,	2.581,	3.825,	4.255, 4, 0],
                     [17,	96,	3.196,	3.534,	4.257, 4, 0],
                     [18,	98,	3.74,	3.8,	4.32, 4, 0],
                     [19,	100,	3.42,	3.328,	3.768, 4, 0],
                     [20,	102,    4.116,	3.972,	4.444, 4, 0],
                     [21,	104,	3.453,	3.975,	4.369, 4, 0],
                     [22,	106,	3.146,	3.389,	4.095, 4, 0],
                     [23,	108,	3.931,	4.174,	4.378, 4, 0],
                     [24,	110,	3.899,	3.819,	4.369, 4, 0],
                     [25,	112,	4.15,	4.474,	4.821, 4, 0],
                     [26,	114,	3.607,	3.909,	4.611, 4, 0],
                     [27,	116,	4.295,	4.234,	4.777, 4, 0],
                     [28,	118,	4.017,	3.716,	4.58, 4, 0],
                     [29,	120,	3.888,	4.321,	4.619, 4, 0],
                     [30,	122,	4.096,	4.386,	4.934, 4, 0],
                     [31,	124,	3.506,	3.948,	4.301, 4, 0],
                     [32,	126,	4.103,	4.168,	4.553, 4, 0],
                     [33,	128,	3.909,	3.879,	4.593, 4, 0],
                     [34,	130,	3.82,	3.915,	4.034, 4, 0],
                     [35,	132,	3.679,	4.024,	4.522, 4, 0],
                     [36,	134,	3.713,	3.822,	4.372, 4, 0],
                     [37,	136,	3.12,	4.046,	4.353, 3, 1],
                     [38,	138,	3.626,	3.845,	4.505, 3, 1],
                     [39,	140,	3.839,	3.534,	3.906, 3, 1],
                     [40,	142,	3.287,	3.667,	3.982, 3, 1],
                     [41,	144,	2.988,	3.55,	4.138, 3, 1],
                     [42,	146,	3.554,	3.347,	4.218, 3, 1],
                     [43,	148,	2.992,	3.454,	3.732, 3, 1],
                     [44,	150,	3.275,	3.25,	3.863, 3, 1],
                     [45,	152,	3.322,	3.434,	3.712, 3, 1],
                     [46,	154,	2.939,	3.191,	3.693, 3, 1],
                     [47,	156,	3.619,	3.506,	3.435, 2, 2],
                     [48,	158,	2.985,	3.079,	3.902, 2, 2],
                     [49,	160,	2.542,	2.521,	3.038, 2, 2],
                     [50,	162,	2.848,	2.866,	3.046, 2, 2],
                     [51,	164,	1.827,	2.865,	3.756, 2, 2],
                     [52,	166,	2.535,	2.96,	3.426, 2, 2],
                     [53,	168,	2.419,	2.924,	3.135, 2, 2],
                     [54,	170,	2.453,	2.6,	2.797, 2, 2],
                     [55,	172,	1.788,	2.753,	3.372, 2, 2],
                     [56,	174,	1.637,	2.229,	2.713, 2, 2],
                     [57,	176,	2.551,	2.548,	3.134, 1, 3],
                     [58,	178,	2.416,	2.315,	2.925, 1, 3],
                     [59,	180,	1.64,	1.451,	2.436, 1, 3],
                     [60,	182,	1.752,	1.88,	2.304, 1, 3],
                     [61,	184,	1.283,	2.257,	2.268, 1, 3],
                     [62,	186,	1.487,	1.722,	2.08, 1, 3],
                     [63,	188,	1.755,	1.718,	2.211, 1, 3],
                     [64,	190,	1.229,	1.75,	2.249, 1, 3],
                     [65,	192,	0.893,	1.265,	1.526, 1, 3],
                     [66,	194,	1.432,	1.497,	1.284, 1, 3],
                     [67,	196,	0.769,	0.754,	1.515, 1, 3],
                     [68,	198,	1.01,	1.058,	1.449, 1, 3],
                     [69,	200,	1.115,	1.504,	1.335, 1, 3],
                     [70,	202,	1.536,	1.599,	1.811, 1, 3]
                     ]


db0 = pymysql.connect(
     host = "localhost",
     user = "VEC",
     password = "666888",
     database = "SAC",
)

db1 = pymysql.connect(
     host = "192.168.1.122",
     user = "VEC",
     password = "666888",
     database = "SAC",
)


def update_ts_vehicle_table(ts_vehicle, sv_vehicle, local_table, idx, loop_count, cursor):
    # Update data into ts_vehicle
    event = str(1)
    sql = "UPDATE " + str(ts_vehicle) + " SET " + str(sv_vehicle) + " = " \
        + str(local_table[loop_count % (np.shape(ts_vehicle0_table)[0])][idx]) \
        + " WHERE EVENT = " + event
    cursor.execute(sql)

def update_uti(v0:list, v1:list, v2:list, v3:list, cursor):
    sql = "UPDATE vehicle_information SET Fs=%s, utilization=%s WHERE ID = %s"
    cursor.execute(sql,(str(v0[1]),str(v0[2]),str(v0[0])))
    cursor.execute(sql,(str(v1[1]),str(v1[2]),str(v1[0])))
    cursor.execute(sql,(str(v2[1]),str(v2[2]),str(v2[0])))
    cursor.execute(sql,(str(v3[1]),str(v3[2]),str(v3[0])))

# Update data
if __name__ == "__main__":
    loop_count = 0
    while loop_count <= 20000:
        # ID, Fs, utilization

        if loop_count % (np.shape(ts_vehicle0_table)[0]) == 5:
            # In this event, vehicles start just now and not crowded around BS
            # Task vehicle: vehicle0, others are service vehicles
            # Vehicle0,2,3 are busy (90%), vehicle1 is free (3%)
            # SAC result: choose vehicle1

            # all vehicles send requests to the BS[0]
            # DDQN result: BS[1]
            v0=[0, 7.0, 90]
            v1=[0, 6.5, 3.0]
            v2=[0, 5.5, 90]
            v3=[0, 6.3, 90]
            ts_id = "192.168.1.119"


        elif loop_count % (np.shape(ts_vehicle0_table)[0]) == 30:
            pass
            # In this event, vehicles are all around BS[0]
            # Task vehicle: vehicle1, others are service vehicles
            # Vehicle0,1,3 are busy, vehicle2 is free
            # SAC result: choose vehicle2

            # all vehicles send requests to the BS[0]
            # DDQN result: BS[1]
            v0=[0, 7.0, 95]
            v1=[0, 6.5, 85]
            v2=[0, 5.5, 6.0]
            v3=[0, 6.3, 92]
            ts_id = "192.168.1.121"

        elif loop_count % (np.shape(ts_vehicle0_table)[0]) == 65:
            pass
            # In this event, vehicles are all around BS[1]
            # Task vehicle: vehicle3, others are service vehicles
            # Vehicle0,2,3 are busy, vehicle1 is free
            # SAC result: choose vehicle1

            # all vehicles send requests to the BS[1]
            # DDQN result: BS[0]
            v0=[0, 7.0, 95]
            v1=[0, 6.5, 8]
            v2=[0, 5.5, 84]
            v3=[0, 6.3, 92]
            ts_id = "192.168.1.124"
        else:
            v0=[0, 7.0, 5.0]
            v1=[0, 6.5, 5.0]
            v2=[0, 5.5, 5.0]
            v3=[0, 6.3, 5.0]
            ts_id = random.choice(["192.168.1.119","192.168.1.121","192.168.1.124"])
        
        if loop_count % (np.shape(ts_vehicle0_table)[0]) > 35:
            bs_id= "1"
            db = db1
        else:
            bs_id= "0"
            db = db0
        

        cursor = db.cursor()
        # Update vehicla utlizaiton
        update_uti(v0,v1,v2,v3,cursor)


        # Update data into ts_vehicle0: V2V_transfer_rate & traffic_density
        update_ts_vehicle_table("ts_vehicle0", "send_time", ts_vehicle0_table, 1, loop_count, cursor)
        update_ts_vehicle_table("ts_vehicle0", "VEHICLE1", ts_vehicle0_table, 2, loop_count,cursor)
        update_ts_vehicle_table("ts_vehicle0", "VEHICLE2", ts_vehicle0_table, 3, loop_count,cursor)
        update_ts_vehicle_table("ts_vehicle0", "VEHICLE3", ts_vehicle0_table, 4, loop_count,cursor)
        update_ts_vehicle_table("ts_vehicle0", "BS0_DENSITY", ts_vehicle0_table, 5, loop_count,cursor)
        update_ts_vehicle_table("ts_vehicle0", "BS1_DENSITY", ts_vehicle0_table, 6, loop_count,cursor)
        # Update data into ts_vehicle1: V2V_transfer_rate & traffic_density
        update_ts_vehicle_table("ts_vehicle1", "send_time", ts_vehicle0_table, 1, loop_count, cursor)
        update_ts_vehicle_table("ts_vehicle1", "VEHICLE0", ts_vehicle1_table, 2, loop_count,cursor)
        update_ts_vehicle_table("ts_vehicle1", "VEHICLE2", ts_vehicle1_table, 3, loop_count,cursor)
        update_ts_vehicle_table("ts_vehicle1", "VEHICLE3", ts_vehicle1_table, 4, loop_count,cursor)
        update_ts_vehicle_table("ts_vehicle1", "BS0_DENSITY", ts_vehicle1_table, 5, loop_count,cursor)
        update_ts_vehicle_table("ts_vehicle1", "BS1_DENSITY", ts_vehicle1_table, 6, loop_count,cursor)
        # Update data into ts_vehicle2: V2V_transfer_rate & traffic_density
        update_ts_vehicle_table("ts_vehicle2", "send_time", ts_vehicle0_table, 1, loop_count, cursor)
        update_ts_vehicle_table("ts_vehicle2", "VEHICLE0", ts_vehicle2_table, 2, loop_count,cursor)
        update_ts_vehicle_table("ts_vehicle2", "VEHICLE1", ts_vehicle2_table, 3, loop_count,cursor)
        update_ts_vehicle_table("ts_vehicle2", "VEHICLE3", ts_vehicle2_table, 4, loop_count,cursor)
        update_ts_vehicle_table("ts_vehicle2", "BS0_DENSITY", ts_vehicle2_table, 5, loop_count,cursor)
        update_ts_vehicle_table("ts_vehicle2", "BS1_DENSITY", ts_vehicle2_table, 6, loop_count,cursor)
        # Update data into ts_vehicle3
        update_ts_vehicle_table("ts_vehicle3", "send_time", ts_vehicle0_table, 1, loop_count, cursor)
        update_ts_vehicle_table("ts_vehicle3", "VEHICLE0", ts_vehicle3_table, 2, loop_count,cursor)
        update_ts_vehicle_table("ts_vehicle3", "VEHICLE1", ts_vehicle3_table, 3, loop_count,cursor)
        update_ts_vehicle_table("ts_vehicle3", "VEHICLE2", ts_vehicle3_table, 4, loop_count,cursor)
        update_ts_vehicle_table("ts_vehicle3", "BS0_DENSITY", ts_vehicle3_table, 5, loop_count,cursor)
        update_ts_vehicle_table("ts_vehicle3", "BS1_DENSITY", ts_vehicle3_table, 6, loop_count,cursor)
        
        
        # time delay
        db.commit()
        control_msg = struct.pack("!i10s10s",2,b"control",bs_id.encode())
        udp_request.control_send(control_msg,ts_id)
        print("Task vehicle is:",ts_id,"Choose base station ",bs_id)
        time.sleep(2)

        # print("Update Successfully")
        # increase loop_count
        loop_count += 1
    db.close()